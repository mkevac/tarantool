space = box.schema.create_space('tweedledum')
---
...
space:create_index('primary', { type = 'hash'})
---
...
remote = box.net.box.new('localhost', box.cfg.primary_port, '0.5')
---
...
type(remote)
---
- table
...
remote:ping()
---
- true
...
remote:ping()
---
- true
...
box.net.box.ping(remote)
---
- true
...
space:insert{123, 'test1', 'test2'}
---
- [123, 'test1', 'test2']
...
space:select{123}
---
- [123, 'test1', 'test2']
...
tuple = remote:select(space.n, 123)
---
...
function test(...) return box.tuple.new({ 123, 456 }) end
---
...
f, a = box.call_loadproc('test')
---
...
type(f)
---
- function
...
type(a)
---
- nil
...
remote:call('test')
---
- [123, 456]
...
function test(...) return box.tuple.new({ ... }) end
---
...
remote:call('test', 123, 345, { 678, 910 })
---
- [123, 345, [678, 910]]
...
function test(...) return box.tuple.new({ ... }), box.tuple.new({ ... }) end
---
...
remote:call('test', 123, 345, { 678, 910 })
---
- [123, 345, [678, 910]]
- [123, 345, [678, 910]]
...
test = { a = 'a', b = function(self, ...) return box.tuple.new(123) end }
---
...
remote:call('test:b')
---
- [123]
...
test.b = function(self, ...) return box.tuple.new({self.a, ...}) end
---
...
f, a = box.call_loadproc('test:b')
---
...
type(f)
---
- function
...
type(a)
---
- table
...
a.a
---
- a
...
f, a = box.call_loadproc('test.b')
---
...
type(f)
---
- function
...
type(a)
---
- nil
...
remote:call('test:b')
---
- ['a']
...
remote:call('test:b', 'b', 'c')
---
- ['a', 'b', 'c']
...
remote:call('test:b', 'b', 'c', 'd', 'e')
---
- ['a', 'b', 'c', 'd', 'e']
...
remote:call('test:b', 'b', { 'c', { d = 'e' } })
---
- ['a', 'b', ['c', {'d': 'e'}]]
...
test = { a = { c = 1, b = function(self, ...) return { self.c, ... } end } }
---
...
f, a = box.call_loadproc('test.a:b')
---
...
type(f)
---
- function
...
type(a)
---
- table
...
a.c
---
- 1
...
f, a = box.call_loadproc('test.a.b')
---
...
type(f)
---
- function
...
type(a)
---
- nil
...
remote:call('test.a:b', 123)
---
- [1, 123]
...
box.space.tweedledum:select(123)
---
- [123, 'test1', 'test2']
...
box.space.tweedledum:select({123})
---
- [123, 'test1', 'test2']
...
remote:call('box.space.tweedledum:select', 123)
---
- [123, 'test1', 'test2']
...
remote:call('box.space.tweedledum:select', {123})
---
- [123, 'test1', 'test2']
...
slf, foo = box.call_loadproc('box.net.self:select')
---
...
type(slf)
---
- function
...
type(foo)
---
- table
...
tuple
---
- [123, 'test1', 'test2']
...
type(tuple)
---
- userdata
...
#tuple
---
- 3
...
space:update(123, {{'=', 1, 'test1-updated'}})
---
- [123, 'test1-updated', 'test2']
...
remote:update(space.n, 123, {{'=', 2, 'test2-updated'}})
---
- [123, 'test1-updated', 'test2-updated']
...
space:insert{123, 'test1', 'test2'}
---
- error: Duplicate key exists in unique index 0
...
remote:insert(space.n, {123, 'test1', 'test2'})
---
- error: Duplicate key exists in unique index 0
...
remote:insert(space.n, {345, 'test1', 'test2'})
---
- [345, 'test1', 'test2']
...
remote:select(space.n, {345})
---
- [345, 'test1', 'test2']
...
remote:call('box.space.tweedledum:select', 345)
---
- [345, 'test1', 'test2']
...
space:select{345}
---
- [345, 'test1', 'test2']
...
remote:replace(space.n, {345, 'test1-replaced', 'test2-replaced'})
---
- [345, 'test1-replaced', 'test2-replaced']
...
space:select{345}
---
- [345, 'test1-replaced', 'test2-replaced']
...
-- remote:select_limit(space.n, 0, 0, 1000, 345)
space:select_range(0, 1000)
---
- [123, 'test1-updated', 'test2-updated']
- [345, 'test1-replaced', 'test2-replaced']
...
remote:select_range(space.n, 0, 1000)
---
- [123, 'test1-updated', 'test2-updated']
- [345, 'test1-replaced', 'test2-replaced']
...
space:select{345}
---
- [345, 'test1-replaced', 'test2-replaced']
...
remote:select(space.n, {345})
---
- [345, 'test1-replaced', 'test2-replaced']
...
remote:timeout(0.5):select(space.n, {345})
---
- [345, 'test1-replaced', 'test2-replaced']
...
remote:call('box.fiber.sleep', .01)
---
...
remote:timeout(0.01):call('box.fiber.sleep', 10)
---
- null
...
--# setopt delimiter ';'
pstart = box.time();
---
...
parallel = {};
---
...
function parallel_foo(id)
    box.fiber.sleep(math.random() * .05)
    return id
end;
---
...
parallel_foo('abc');
---
- abc
...
for i = 1, 20 do
    box.fiber.resume(
        box.fiber.create(
            function()
                box.fiber.detach()
                local s = string.format('%07d', i)
                local so = remote:call('parallel_foo', s)
                table.insert(parallel, s == so[0])
            end
        )
    )
end;
---
...
for i = 1, 20 do
    if #parallel == 20 then
        break
    end
    box.fiber.sleep(0.1)
end;
---
...
--# setopt delimiter ''
unpack(parallel)
---
- true
- true
- true
- true
- true
- true
- true
- true
- true
- true
- true
- true
- true
- true
- true
- true
- true
- true
- true
- true
...
#parallel
---
- 20
...
box.time() - pstart < 0.5
---
- true
...
remote:close()
---
- true
...
remote:close()
---
- error: '[string "-- box_net.lua (internal file)..."]:406: box.net.box: already closed'
...
remote:ping()
---
- error: '[string "-- box_net.lua (internal file)..."]:411: box.net.box: connection
    was closed'
...
space:drop()
---
...
